# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Desktop Build and Release

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "main" ]
  release:
    types: [published]

jobs:
  build:
    strategy:
      matrix:
        configuration: [Release]

    runs-on: windows-latest
    permissions:
      contents: write
      actions: read

    env:
      Solution_Name: TelegramChatViewer.csproj
      Project_Directory: .

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Install the .NET SDK indicated in the global.json file
    - name: Install .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    # Add MSBuild to the PATH
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: dotnet restore $env:Solution_Name
      working-directory: ${{ env.Project_Directory }}

    # Build the application
    - name: Build the application
      run: dotnet build $env:Solution_Name --configuration ${{ matrix.configuration }} --no-restore
      working-directory: ${{ env.Project_Directory }}

    # Publish single-file executable for Windows x64
    - name: Publish Windows x64
      run: |
        dotnet publish $env:Solution_Name `
          --configuration ${{ matrix.configuration }} `
          --runtime win-x64 `
          --self-contained true `
          --output ./publish/win-x64 `
          -p:PublishSingleFile=true `
          -p:EnableCompressionInSingleFile=true `
          -p:PublishTrimmed=false `
          --no-restore
      working-directory: ${{ env.Project_Directory }}

    # Run tests if they exist
    - name: Run tests
      run: dotnet test $env:Solution_Name --configuration ${{ matrix.configuration }} --no-build --logger trx --results-directory "TestResults"
      working-directory: ${{ env.Project_Directory }}
      continue-on-error: true

    # Get version information and extract changelog
    - name: Get Version and Changelog
      id: version
      shell: pwsh
      run: |
        if (Test-Path "version.txt") {
          $version = Get-Content "version.txt" -Raw
          $version = $version.Trim()
        } else {
          $version = "1.0.0"
        }
        echo "VERSION=$version" >> $env:GITHUB_OUTPUT
        echo "Version: $version"
        
        # Check if this version tag already exists
        $tagExists = git tag -l "v$version"
        if ($tagExists) {
          echo "TAG_EXISTS=true" >> $env:GITHUB_OUTPUT
          echo "Tag v$version already exists"
        } else {
          echo "TAG_EXISTS=false" >> $env:GITHUB_OUTPUT
          echo "Tag v$version does not exist"
        }
        
        # Extract changelog for current version
        $changelogContent = ""
        if (Test-Path "CHANGELOG.md") {
          $changelog = Get-Content "CHANGELOG.md" -Raw
          
          # Extract content between current version and next version/end
          $pattern = "(?s)## \[$version\].*?(?=## \[|\z)"
          $match = [regex]::Match($changelog, $pattern)
          
          if ($match.Success) {
            $changelogContent = $match.Value
            # Remove the version header line for cleaner release notes
            $changelogContent = $changelogContent -replace "## \[$version\] - \d{4}-\d{2}-\d{2}", ""
            $changelogContent = $changelogContent.Trim()
          } else {
            $changelogContent = "Release notes for version $version"
          }
        } else {
          $changelogContent = "Release notes for version $version"
        }
        
        # Save changelog to file for use in release
        $changelogContent | Out-File -FilePath "release-notes.md" -Encoding UTF8
        echo "Extracted changelog for version $version"

    # Create and push tag if it doesn't exist and we're on main branch
    - name: Create and Push Tag
      if: github.ref == 'refs/heads/main' && steps.version.outputs.TAG_EXISTS == 'false'
      shell: pwsh
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $version = "${{ steps.version.outputs.VERSION }}"
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -a "v$version" -m "Release version $version"
        git push origin "v$version"
        echo "Created and pushed tag v$version"

    # Create artifacts
    - name: Create Release Artifacts
      shell: pwsh
      run: |
        # Create release directory
        New-Item -ItemType Directory -Force -Path "./release"
        
        # Create a temp directory for the zip contents
        $tempDir = "TelegramChatViewer-Package"
        New-Item -ItemType Directory -Force -Path $tempDir
        
        # Copy single-file executable
        if (Test-Path "./publish/win-x64/TelegramChatViewer.exe") {
          Copy-Item "./publish/win-x64/TelegramChatViewer.exe" "./$tempDir/"
        }
        
        # Copy documentation
        if (Test-Path "README.md") {
          Copy-Item "README.md" "./$tempDir/"
        }
        if (Test-Path "CHANGELOG.md") {
          Copy-Item "CHANGELOG.md" "./$tempDir/"
        }
        if (Test-Path "FEATURES.md") {
          Copy-Item "FEATURES.md" "./$tempDir/"
        }
        
        # Create the release zip
        Compress-Archive -Path "./$tempDir/*" -DestinationPath "./release/TelegramChatViewer-v${{ steps.version.outputs.VERSION }}.zip"
        
        # Clean up temp directory
        Remove-Item $tempDir -Recurse -Force

    # Upload build artifacts
    - name: Upload Release Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: TelegramChatViewer-v${{ steps.version.outputs.VERSION }}
        path: ./release/TelegramChatViewer-v${{ steps.version.outputs.VERSION }}.zip
        retention-days: 90

    # Create GitHub Release on tag push or when new tag was created
    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/v') || (github.ref == 'refs/heads/main' && steps.version.outputs.TAG_EXISTS == 'false')
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.version.outputs.VERSION }}
        name: Telegram Chat Viewer ${{ steps.version.outputs.VERSION }}
        body_path: release-notes.md
        files: ./release/TelegramChatViewer-v${{ steps.version.outputs.VERSION }}.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Upload test results
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: TestResults
        retention-days: 30
