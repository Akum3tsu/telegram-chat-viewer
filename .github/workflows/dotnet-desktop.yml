# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Desktop Build and Release

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "main" ]
  release:
    types: [published]

jobs:
  build:
    strategy:
      matrix:
        configuration: [Release]

    runs-on: windows-latest

    env:
      Solution_Name: TelegramChatViewer.csproj
      Project_Directory: .

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Install the .NET SDK indicated in the global.json file
    - name: Install .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    # Add MSBuild to the PATH
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: dotnet restore $env:Solution_Name
      working-directory: ${{ env.Project_Directory }}

    # Build the application
    - name: Build the application
      run: dotnet build $env:Solution_Name --configuration ${{ matrix.configuration }} --no-restore
      working-directory: ${{ env.Project_Directory }}

    # Publish single-file executable for Windows x64
    - name: Publish Windows x64
      run: |
        dotnet publish $env:Solution_Name `
          --configuration ${{ matrix.configuration }} `
          --runtime win-x64 `
          --self-contained true `
          --output ./publish/win-x64 `
          -p:PublishSingleFile=true `
          -p:EnableCompressionInSingleFile=true `
          -p:PublishTrimmed=false `
          -p:PublishReadyToRun=true `
          --no-restore
      working-directory: ${{ env.Project_Directory }}

    # Create portable version (framework-dependent)
    - name: Publish Portable Version
      run: |
        dotnet publish $env:Solution_Name `
          --configuration ${{ matrix.configuration }} `
          --runtime win-x64 `
          --self-contained false `
          --output ./publish/portable `
          --no-restore
      working-directory: ${{ env.Project_Directory }}

    # Run tests if they exist
    - name: Run tests
      run: dotnet test $env:Solution_Name --configuration ${{ matrix.configuration }} --no-build --logger trx --results-directory "TestResults"
      working-directory: ${{ env.Project_Directory }}
      continue-on-error: true

    # Get version information
    - name: Get Version
      id: version
      shell: pwsh
      run: |
        if (Test-Path "version.txt") {
          $version = Get-Content "version.txt" -Raw
          $version = $version.Trim()
        } else {
          $version = "1.0.0"
        }
        echo "VERSION=$version" >> $env:GITHUB_OUTPUT
        echo "Version: $version"

    # Create artifacts
    - name: Create Release Artifacts
      shell: pwsh
      run: |
        # Create release directory
        New-Item -ItemType Directory -Force -Path "./release"
        
        # Copy single-file executable
        if (Test-Path "./publish/win-x64/TelegramChatViewer.exe") {
          Copy-Item "./publish/win-x64/TelegramChatViewer.exe" "./release/TelegramChatViewer-v${{ steps.version.outputs.VERSION }}-win-x64.exe"
        }
        
        # Create portable zip
        if (Test-Path "./publish/portable") {
          Compress-Archive -Path "./publish/portable/*" -DestinationPath "./release/TelegramChatViewer-v${{ steps.version.outputs.VERSION }}-portable.zip"
        }
        
        # Copy example files
        if (Test-Path "./examples") {
          Copy-Item "./examples" "./release/examples" -Recurse
        }
        
        # Copy documentation
        if (Test-Path "README.md") {
          Copy-Item "README.md" "./release/"
        }
        if (Test-Path "FEATURES.md") {
          Copy-Item "FEATURES.md" "./release/"
        }
        
        # Create source archive
        $sourceFiles = @(
          "*.cs", "*.xaml", "*.csproj", "*.sln", "*.json", "*.md", "*.txt", "*.bat", "*.ps1", "*.ico", "*.manifest",
          "Services/*", "Models/*", "Properties/*", ".github/*"
        )
        
        $tempDir = "TelegramChatViewer-Source"
        New-Item -ItemType Directory -Force -Path $tempDir
        
        foreach ($pattern in $sourceFiles) {
          $files = Get-ChildItem -Path $pattern -Recurse -File -ErrorAction SilentlyContinue
          foreach ($file in $files) {
            $relativePath = $file.FullName.Substring((Get-Location).Path.Length + 1)
            $destPath = Join-Path $tempDir $relativePath
            $destDir = Split-Path $destPath -Parent
            New-Item -ItemType Directory -Force -Path $destDir -ErrorAction SilentlyContinue
            Copy-Item $file.FullName $destPath
          }
        }
        
        Compress-Archive -Path "./$tempDir/*" -DestinationPath "./release/TelegramChatViewer-v${{ steps.version.outputs.VERSION }}-source.zip"
        Remove-Item $tempDir -Recurse -Force

    # Upload build artifacts
    - name: Upload Release Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: TelegramChatViewer-v${{ steps.version.outputs.VERSION }}
        path: |
          ./release/TelegramChatViewer-v${{ steps.version.outputs.VERSION }}-win-x64.exe
          ./release/TelegramChatViewer-v${{ steps.version.outputs.VERSION }}-portable.zip
          ./release/TelegramChatViewer-v${{ steps.version.outputs.VERSION }}-source.zip
          ./release/README.md
          ./release/FEATURES.md
        retention-days: 90

    # Create GitHub Release on tag push
    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      with:
        name: Telegram Chat Viewer ${{ steps.version.outputs.VERSION }}
        body: |
          # Telegram Chat Viewer ${{ steps.version.outputs.VERSION }}
          
          ## üöÄ What's New
          - Advanced text selection (individual and multi-message)
          - User-based alternating message layout
          - Performance optimization for massive datasets (100k+ messages)
          - Rich media support (voice, stickers, videos, photos)
          - Real-time search with keyboard navigation
          - Light/dark theme support
          
          ## üì¶ Downloads
          
          ### Recommended
          - **TelegramChatViewer-v${{ steps.version.outputs.VERSION }}-win-x64.exe** - Single-file executable (no installation required)
          
          ### Alternative
          - **TelegramChatViewer-v${{ steps.version.outputs.VERSION }}-portable.zip** - Requires .NET 8.0 Runtime
          - **TelegramChatViewer-v${{ steps.version.outputs.VERSION }}-source.zip** - Source code
          
          ## üõ†Ô∏è System Requirements
          - Windows 10/11 (x64)
          - .NET 8.0 Runtime (included in single-file executable)
          
          ## üìã Features
          - **Text Selection**: Select any text element (usernames, messages, timestamps)
          - **Multi-Message Selection**: `Ctrl+Shift+A` to select multiple messages
          - **Performance**: Handles massive chat files (100k+ messages)
          - **Search**: Real-time search with F3/Shift+F3 navigation
          - **Themes**: Light and dark mode support
          
          ## üîß Usage
          1. Download the `.exe` file
          2. Run directly (no installation needed)
          3. Click "Load Chat" and select your Telegram JSON export
          4. Use `Ctrl+Shift+A` for multi-message selection
          
          Full documentation available in the repository.
        files: |
          ./release/TelegramChatViewer-v${{ steps.version.outputs.VERSION }}-win-x64.exe
          ./release/TelegramChatViewer-v${{ steps.version.outputs.VERSION }}-portable.zip
          ./release/TelegramChatViewer-v${{ steps.version.outputs.VERSION }}-source.zip
          ./release/README.md
          ./release/FEATURES.md
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Upload test results
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: TestResults
        retention-days: 30
